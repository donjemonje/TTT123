#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyDB")]
public partial class GameDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertPlayer(Player instance);
  partial void UpdatePlayer(Player instance);
  partial void DeletePlayer(Player instance);
  partial void InsertGame(Game instance);
  partial void UpdateGame(Game instance);
  partial void DeleteGame(Game instance);
  partial void InsertGroup(Group instance);
  partial void UpdateGroup(Group instance);
  partial void DeleteGroup(Group instance);
  partial void InsertGameMove(GameMove instance);
  partial void UpdateGameMove(GameMove instance);
  partial void DeleteGameMove(GameMove instance);
  #endregion
	
	public GameDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MyDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public GameDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GameDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GameDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GameDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Player> Players
	{
		get
		{
			return this.GetTable<Player>();
		}
	}
	
	public System.Data.Linq.Table<Game> Games
	{
		get
		{
			return this.GetTable<Game>();
		}
	}
	
	public System.Data.Linq.Table<Group> Groups
	{
		get
		{
			return this.GetTable<Group>();
		}
	}
	
	public System.Data.Linq.Table<GameMove> GameMoves
	{
		get
		{
			return this.GetTable<GameMove>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _GroupId;
	
	private string _Name;
	
	private string _IDCardNumber;
	
	private System.DateTime _CreateDate;
	
	private EntityRef<Group> _Group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDCardNumberChanging(string value);
    partial void OnIDCardNumberChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
	
	public Player()
	{
		this._Group = default(EntityRef<Group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
	public int GroupId
	{
		get
		{
			return this._GroupId;
		}
		set
		{
			if ((this._GroupId != value))
			{
				if (this._Group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGroupIdChanging(value);
				this.SendPropertyChanging();
				this._GroupId = value;
				this.SendPropertyChanged("GroupId");
				this.OnGroupIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCardNumber", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string IDCardNumber
	{
		get
		{
			return this._IDCardNumber;
		}
		set
		{
			if ((this._IDCardNumber != value))
			{
				this.OnIDCardNumberChanging(value);
				this.SendPropertyChanging();
				this._IDCardNumber = value;
				this.SendPropertyChanged("IDCardNumber");
				this.OnIDCardNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Player", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.Players.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.Players.Add(this);
					this._GroupId = value.Id;
				}
				else
				{
					this._GroupId = default(int);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _CreateDate;
	
	private bool _IsFull;
	
	private string _WinnerGroupName;
	
	private System.Nullable<int> _InRoomCounter;
	
	private EntitySet<Group> _Groups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnIsFullChanging(bool value);
    partial void OnIsFullChanged();
    partial void OnWinnerGroupNameChanging(string value);
    partial void OnWinnerGroupNameChanged();
    partial void OnInRoomCounterChanging(System.Nullable<int> value);
    partial void OnInRoomCounterChanged();
    #endregion
	
	public Game()
	{
		this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFull", DbType="Bit NOT NULL")]
	public bool IsFull
	{
		get
		{
			return this._IsFull;
		}
		set
		{
			if ((this._IsFull != value))
			{
				this.OnIsFullChanging(value);
				this.SendPropertyChanging();
				this._IsFull = value;
				this.SendPropertyChanged("IsFull");
				this.OnIsFullChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerGroupName", DbType="NVarChar(MAX)")]
	public string WinnerGroupName
	{
		get
		{
			return this._WinnerGroupName;
		}
		set
		{
			if ((this._WinnerGroupName != value))
			{
				this.OnWinnerGroupNameChanging(value);
				this.SendPropertyChanging();
				this._WinnerGroupName = value;
				this.SendPropertyChanged("WinnerGroupName");
				this.OnWinnerGroupNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InRoomCounter", DbType="Int")]
	public System.Nullable<int> InRoomCounter
	{
		get
		{
			return this._InRoomCounter;
		}
		set
		{
			if ((this._InRoomCounter != value))
			{
				this.OnInRoomCounterChanging(value);
				this.SendPropertyChanging();
				this._InRoomCounter = value;
				this.SendPropertyChanged("InRoomCounter");
				this.OnInRoomCounterChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Group", Storage="_Groups", ThisKey="Id", OtherKey="GameId")]
	public EntitySet<Group> Groups
	{
		get
		{
			return this._Groups;
		}
		set
		{
			this._Groups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Groups(Group entity)
	{
		this.SendPropertyChanging();
		entity.Game = this;
	}
	
	private void detach_Groups(Group entity)
	{
		this.SendPropertyChanging();
		entity.Game = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private int _GameId;
	
	private System.DateTime _CreateDate;
	
	private int _PlayerNo;
	
	private EntitySet<Player> _Players;
	
	private EntitySet<GameMove> _GameMoves;
	
	private EntityRef<Game> _Game;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnPlayerNoChanging(int value);
    partial void OnPlayerNoChanged();
    #endregion
	
	public Group()
	{
		this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
		this._GameMoves = new EntitySet<GameMove>(new Action<GameMove>(this.attach_GameMoves), new Action<GameMove>(this.detach_GameMoves));
		this._Game = default(EntityRef<Game>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
	public int GameId
	{
		get
		{
			return this._GameId;
		}
		set
		{
			if ((this._GameId != value))
			{
				if (this._Game.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIdChanging(value);
				this.SendPropertyChanging();
				this._GameId = value;
				this.SendPropertyChanged("GameId");
				this.OnGameIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerNo", DbType="Int NOT NULL")]
	public int PlayerNo
	{
		get
		{
			return this._PlayerNo;
		}
		set
		{
			if ((this._PlayerNo != value))
			{
				this.OnPlayerNoChanging(value);
				this.SendPropertyChanging();
				this._PlayerNo = value;
				this.SendPropertyChanged("PlayerNo");
				this.OnPlayerNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Player", Storage="_Players", ThisKey="Id", OtherKey="GroupId")]
	public EntitySet<Player> Players
	{
		get
		{
			return this._Players;
		}
		set
		{
			this._Players.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GameMove", Storage="_GameMoves", ThisKey="Id", OtherKey="GroupId")]
	public EntitySet<GameMove> GameMoves
	{
		get
		{
			return this._GameMoves;
		}
		set
		{
			this._GameMoves.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Group", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
	public Game Game
	{
		get
		{
			return this._Game.Entity;
		}
		set
		{
			Game previousValue = this._Game.Entity;
			if (((previousValue != value) 
						|| (this._Game.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Game.Entity = null;
					previousValue.Groups.Remove(this);
				}
				this._Game.Entity = value;
				if ((value != null))
				{
					value.Groups.Add(this);
					this._GameId = value.Id;
				}
				else
				{
					this._GameId = default(int);
				}
				this.SendPropertyChanged("Game");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Players(Player entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_Players(Player entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
	
	private void attach_GameMoves(GameMove entity)
	{
		this.SendPropertyChanging();
		entity.Group = this;
	}
	
	private void detach_GameMoves(GameMove entity)
	{
		this.SendPropertyChanging();
		entity.Group = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameMoves")]
public partial class GameMove : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _GroupId;
	
	private int _MoveFrom;
	
	private int _MoveTo;
	
	private System.DateTime _CreateDate;
	
	private EntityRef<Group> _Group;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnMoveFromChanging(int value);
    partial void OnMoveFromChanged();
    partial void OnMoveToChanging(int value);
    partial void OnMoveToChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
	
	public GameMove()
	{
		this._Group = default(EntityRef<Group>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
	public int GroupId
	{
		get
		{
			return this._GroupId;
		}
		set
		{
			if ((this._GroupId != value))
			{
				if (this._Group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGroupIdChanging(value);
				this.SendPropertyChanging();
				this._GroupId = value;
				this.SendPropertyChanged("GroupId");
				this.OnGroupIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoveFrom", DbType="Int NOT NULL")]
	public int MoveFrom
	{
		get
		{
			return this._MoveFrom;
		}
		set
		{
			if ((this._MoveFrom != value))
			{
				this.OnMoveFromChanging(value);
				this.SendPropertyChanging();
				this._MoveFrom = value;
				this.SendPropertyChanged("MoveFrom");
				this.OnMoveFromChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoveTo", DbType="Int NOT NULL")]
	public int MoveTo
	{
		get
		{
			return this._MoveTo;
		}
		set
		{
			if ((this._MoveTo != value))
			{
				this.OnMoveToChanging(value);
				this.SendPropertyChanging();
				this._MoveTo = value;
				this.SendPropertyChanged("MoveTo");
				this.OnMoveToChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
	public System.DateTime CreateDate
	{
		get
		{
			return this._CreateDate;
		}
		set
		{
			if ((this._CreateDate != value))
			{
				this.OnCreateDateChanging(value);
				this.SendPropertyChanging();
				this._CreateDate = value;
				this.SendPropertyChanged("CreateDate");
				this.OnCreateDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GameMove", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
	public Group Group
	{
		get
		{
			return this._Group.Entity;
		}
		set
		{
			Group previousValue = this._Group.Entity;
			if (((previousValue != value) 
						|| (this._Group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Group.Entity = null;
					previousValue.GameMoves.Remove(this);
				}
				this._Group.Entity = value;
				if ((value != null))
				{
					value.GameMoves.Add(this);
					this._GroupId = value.Id;
				}
				else
				{
					this._GroupId = default(int);
				}
				this.SendPropertyChanged("Group");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
